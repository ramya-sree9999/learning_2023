//1. Write a program to print exponent part of double variable in hexadecimal and binary format.
#include <stdio.h>

void printExponent(double x) {
    unsigned long long *ptr = (unsigned long long *)&x; // Treat x as a pointer to an unsigned long long

    // Extract the exponent bits using bitwise operations
    unsigned long long exponent = (*ptr >> 52) & 0x7FF;

    // Convert the exponent to hexadecimal format
    printf("Exponent in hexadecimal: 0x%llX\n", exponent);

    // Convert the exponent to binary format
    printf("Exponent in binary: 0b");
    for (int i = 11; i >= 0; i--) {
        printf("%d", (exponent >> i) & 1);
    }
    printf("\n");
}

int main() {
    double x = 0.7;
    printExponent(x);

    return 0;
}

//2. Write a program to swap any type of data passed to an function.
#include <stdio.h>

void swap(void *a, void *b, size_t size) {
    char temp[size]; // Temporary storage for swapping

    // Copy the contents of 'a' to 'temp'
    char *tempPtr = (char *)temp;
    char *aPtr = (char *)a;
    for (size_t i = 0; i < size; i++) {
        tempPtr[i] = aPtr[i];
    }

    // Copy the contents of 'b' to 'a'
    char *bPtr = (char *)b;
    for (size_t i = 0; i < size; i++) {
        aPtr[i] = bPtr[i];
    }

    // Copy the contents of 'temp' to 'b'
    for (size_t i = 0; i < size; i++) {
        bPtr[i] = tempPtr[i];
    }
}

int main() {
    int a = 10;
    int b = 20;

    printf("Before swapping: a = %d, b = %d\n", a, b);
    swap(&a, &b, sizeof(int));
    printf("After swapping: a = %d, b = %d\n", a, b);

    float c = 1.5;
    float d = 3.7;

    printf("Before swapping: c = %f, d = %f\n", c, d);
    swap(&c, &d, sizeof(float));
    printf("After swapping: c = %f, d = %f\n", c, d);

    return 0;
}

//3.Write a program to sum every alternate elements of a given array starting for element 0
#include <stdio.h>

int main() {
    int arr[] = {10, 20, 30, 40, 50};
    int size = sizeof(arr) / sizeof(arr[0]);

    int sum = 0;
    for (int i = 0; i < size; i += 2) {
        sum += arr[i];
    }

    printf("Sum of alternate elements: %d\n", sum);

    return 0;
}

//4. Write a program to find total number of bits set in a given array.
#include <stdio.h>

int countSetBits(int num) {
    int count = 0;
    while (num != 0) {
        count += num & 1;
        num >>= 1;
    }
    return count;
}

int main() {
    int arr[] = {0x1, 0xF4, 0x10001};
    int size = sizeof(arr) / sizeof(arr[0]);

    int totalSetBits = 0;
    for (int i = 0; i < size; i++) {
        totalSetBits += countSetBits(arr[i]);
    }

    printf("Total number of set bits: %d\n", totalSetBits);

    return 0;
}

//5.Write a program to find total number of bits set in a given array.
#include <stdio.h>

int countSetBits(int num) {
    int count = 0;
    while (num != 0) {
        count += num & 1;
        num >>= 1;
    }
    return count;
}

int getTotalSetBits(int arr[], int size) {
    int totalSetBits = 0;
    for (int i = 0; i < size; i++) {
        totalSetBits += countSetBits(arr[i]);
    }
    return totalSetBits;
}

int main() {
    int arr[] = {0x1, 0xF4, 0x10001};
    int size = sizeof(arr) / sizeof(arr[0]);

    int totalSetBits = getTotalSetBits(arr, size);

    printf("Total number of set bits: %d\n", totalSetBits);

    return 0;
}